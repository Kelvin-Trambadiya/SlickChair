# TODO: all these passwords would probably not be on git...
## SecureSocial 2 Settings
smtp {
    host=smtp.gmail.com
    #port=25
    ssl=true
    user="acmss.demo@gmail.com"
    password=acmss.demoacmss.demo
    from="acmss.d.e.m.o@gmail.com"
}

securesocial {
  # If enabled, sets the path to your copy of Bootstrap.css to be used instead of the default one provided by SecureSocial
  #bootstrapCssPath="your path"
  # If enabled, sets the Favicon to display when in SecureSocial pages
  #faviconPath="your path"
  # If enabled, sets the path to your copy of JQuery to be used instead of the default one provided by SecureSocial
  #jqueryPath="your path"
  # If enabled, injects this Css file into all SecureSocial pages, allowing for minor style customizations. If you want to do major changes, please read about custom templates in SecureSocial
  #customCssPath="your path"

  # Where to redirect the user if SecureSocial can't figure that out from the request that led the use to the login page
  onLoginGoTo=/

  # Where to redirect the user when he logs out. If not set SecureSocial will redirect to the login page
  onLogoutGoTo=/login

  # Enable SSL for oauth callback urls, login/signup/password recovery pages and the authenticator cookie
  ssl=false

  # Parameters for the cookie used to track users. 
  cookie {
    # The cookie name (defaults to 'id')
    #name=id
    # The path for which the cookie should be sent by the browser (defaults to /)
    #path=/
    # The domain for which the cookie should be sent (it is left empty by default)
    #domain=some_domain
    # If set to true, the cookie is not readable by a client side script (defaults to true).
    #httpOnly=true

    # The amount of time the session id will remain valid since the last request
    idleTimeoutInMinutes=1440 # 24hs

    # The amount of time the session id will be valid since the user authenticated. After this the user will need to re-authenticate
    absoluteTimeoutInMinutes=1440 # 24hs
    
    # Makes the cookie transient (defaults to true). Transient cookie are recommended because the cookie dissapears when the browser is closed. If set to false, the cookie will survive browser restarts and the user won't need to login again (as long as the idle and absolute timeouts have not been passed).
    makeTransient=false
  }

  facebook {
    authorizationUrl="https://graph.facebook.com/oauth/authorize"
    accessTokenUrl="https://graph.facebook.com/oauth/access_token"
    clientId=484665348270521
    clientSecret=9497f31aa23dd2ed003bd997c39f0434
    # remote heroku
    # clientId=533661410015503
    # clientSecret=e04f93800e7453e5a8e6c16afe31917d
    # this scope is the minimum SecureSocial requires.  You can add more if required by your app.
    scope=email
  }
  
  google {
    authorizationUrl="https://accounts.google.com/o/oauth2/auth"
    accessTokenUrl="https://accounts.google.com/o/oauth2/token"
    clientId="728768875318-v0mhnnd3c3i9gr6tkcp8l5qt3riua99o.apps.googleusercontent.com"
    clientSecret="7yPrNIW6Y-AdTMydZzXDQsEl"
    # remote heroku
    # clientId=728768875318.apps.googleusercontent.com
    # clientSecret=_Bq08iJmavNl7dKe5z1vW_h5
    scope="https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email"
  }
  
  userpass {
    # Enable username support, otherwise SecureSocial will use the emails as user names
    withUserNameSupport=false
    sendWelcomeEmail=true
    enableGravatarSupport=false
    tokenDuration=1440 # 24hs
    tokenDeleteInterval=5
    signupSkipLogin=true
  }
}